for(p in p_master){
print(p)
setwd("F:/Study_Backedup/UCSC/LatentFactorModel/paper2_sim/new simulation/8888888_nd_new/")
if(sph==T){
if(Tied==T){
print('Tied bro')
load(paste0("F:/Study_Backedup/UCSC/LatentFactorModel/paper2_sim/new simulation/8888888_nd_new/truth_",truth,'/original/8888888_',p+1,'_nd_workspace.Rdata'))
}else{
print('new prior bro')
# load(paste0("F:/Study_Backedup/UCSC/LatentFactorModel/paper2_sim/new simulation/8888888_nd_new/truth_",truth,'/8888888_',p+1,'_nd_workspace.Rdata'))
load(paste0("F:/Study_Backedup/UCSC/LatentFactorModel/paper2_sim/new simulation/8888888_nd_new/truth_",truth,'/new_prior/8888888_',p+1,'_nd_workspace.Rdata'))
}
accu_master[counter] = sph_predict(n_pos,beta_rs,yes_rs,no_rs,kappa,no_na)
}else{
if(eu_data==T){
print('eu data, eu results bro')
load(paste0("F:/Study_Backedup/UCSC/LatentFactorModel/paper2_sim/new simulation/8888888_nd_new/truth_",truth,'_eu_eu_data/8888888_',p,'_nd_eu_workspace_',truth,'.Rdata'))
}else{
print('sph data, eu results bro')
load(paste0("F:/Study_Backedup/UCSC/LatentFactorModel/paper2_sim/new simulation/8888888_nd_new/truth_",truth,'_eu/8888888_',p,'_nd_eu_workspace_',truth,'.Rdata'))
}
if(p==1){
accu_master[counter] =  eu_predict(apply(beta_master,1,mean),mu,alpha,ymat,no_na)
}else{
accu_master[counter] =  eu_predict(beta_rs/n_pos,mu_rs/n_pos,alpha_rs/n_pos,ymat,no_na)
}
}
waic_decomp [counter,] = waic_compute_new(n_pos,pos_pred,pos_pred2,pos_pred3,no_na)
counter = counter+1
rm(list=setdiff(ls(),c('p_master','counter','waic_compute_new','waic_decomp','len_no_na','accu_master','sph_predict',
'eu_predict','truth','qf3','z_to_x','sph','main','best_mat','Tied','plot','large_penalty','eu_data')))
}
nr = 100
nc = 700
if(sph==T){
penalty_aic = nr * p_master + 2 * nc * p_master + nc
}else{
if(large_penalty==T){
penalty_aic = nr * p_master + 2 * nc * p_master
}else{
penalty_aic = nr * p_master + nc * p_master + nc
}
}
penalty_bic = penalty_aic / 2 * log (nr*nc)
waic_decomp = cbind(waic_decomp,penalty_aic,penalty_bic)
waic_decomp = cbind(waic_decomp, waic_decomp[,1]-waic_decomp[,2],
waic_decomp[,1]-waic_decomp[,3],waic_decomp[,1]-waic_decomp[,4],waic_decomp[,1]-waic_decomp[,5])
colnames(waic_decomp) = c('lppd','pwaic_1','pwaic_2','p_aic','p_bic','lppd-pwaic_1','lppd-pwaic_2','lppd-p_aic','lppd-p_bic')
rownames(waic_decomp) = p_master
best_mat= rbind(best_mat, apply(waic_decomp[,6:9],2,function(x) which(x==max(x))))
if(plot==T){
# pdf(file = paste0("Truth_",truth,"_",main,".pdf"),width=30, height=15)
pdf(file = paste0("Truth_",truth,"_EUdata_",eu_data,'_large_',large_penalty,"_waic_",main,".pdf"),width=15, height=15)
# par(mfrow=c(1,2))
par(mar=c(10,10,4,4),mgp=c(6,2,0))
range_waic = range(waic_decomp[,6:9])
plot(p_master,waic_decomp[,6],type='l', xlab='K', ylab='',lty=1,ylim =range_waic,cex=2,cex.lab=3,cex.axis=2,lwd=3,col='red')
lines(p_master,waic_decomp[,7],ylim =range_waic,cex=2,cex.lab=3,lty=2,cex.axis=2,lwd=3,col='blue')
lines(p_master,waic_decomp[,8],ylim =range_waic,cex=2,cex.lab=3,lty=4,cex.axis=2,lwd=3,col='orange')
lines(p_master,waic_decomp[,9],ylim =range_waic,cex=2,cex.lab=3,lty=5,cex.axis=2,lwd=3,col='green')
abline(v=truth,lwd=2,col='gray68')
if(truth==2){
plot_x = 2
plot_y = -6e4
}else if(truth ==3){
plot_x = 4
plot_y = -8e4
}else{
plot_x = 2
plot_y = -6e4
}
legend(plot_x, plot_y, c("WAIC1","WAIC2","AIC","BIC"),lty=c(1,2,4,5), bty="n", col=c("red", "blue","orange",'green'),cex=2,lwd=3)
dev.off()
pdf(file = paste0("Truth_",truth,"_accuracy_",main,".pdf"),width=15, height=15)
par(mar=c(10,10,4,4),mgp=c(6,2,0))
plot(p_master,accu_master,type='l', xlab='K', ylab='Training Accuracy',ylim=c(0.7,1),lty=1,cex=2,cex.lab=3,cex.axis=2,lwd=3,col='black')
abline(v=truth,lwd=2,col='gray68')
dev.off()
}
save(file=paste0(main,'_large_',large_penalty,"_EUdata_",eu_data,"_Truth_",truth,'.Rdata'),waic_decomp)
}
sph = F
Tied = F
plot = T
large_penalty = T
eu_data = T
if(sph==T){
large_penalty = "NA"
}
p_master = c(1:10)
if(sph==T){
main = 'sph'
}else{
main = 'eu'
}
plot_list = c(3)
best_mat = numeric(0)
for(truth in plot_list){
waic_decomp = matrix(0,length(p_master),3)
accu_master = rep(0,length(p_master))
counter = 1
for(p in p_master){
print(p)
setwd("F:/Study_Backedup/UCSC/LatentFactorModel/paper2_sim/new simulation/8888888_nd_new/")
if(sph==T){
if(Tied==T){
print('Tied bro')
load(paste0("F:/Study_Backedup/UCSC/LatentFactorModel/paper2_sim/new simulation/8888888_nd_new/truth_",truth,'/original/8888888_',p+1,'_nd_workspace.Rdata'))
}else{
print('new prior bro')
# load(paste0("F:/Study_Backedup/UCSC/LatentFactorModel/paper2_sim/new simulation/8888888_nd_new/truth_",truth,'/8888888_',p+1,'_nd_workspace.Rdata'))
load(paste0("F:/Study_Backedup/UCSC/LatentFactorModel/paper2_sim/new simulation/8888888_nd_new/truth_",truth,'/new_prior/8888888_',p+1,'_nd_workspace.Rdata'))
}
accu_master[counter] = sph_predict(n_pos,beta_rs,yes_rs,no_rs,kappa,no_na)
}else{
if(eu_data==T){
print('eu data, eu results bro')
load(paste0("F:/Study_Backedup/UCSC/LatentFactorModel/paper2_sim/new simulation/8888888_nd_new/truth_",truth,'_eu_eu_data/8888888_',p,'_nd_eu_workspace_',truth,'.Rdata'))
}else{
print('sph data, eu results bro')
load(paste0("F:/Study_Backedup/UCSC/LatentFactorModel/paper2_sim/new simulation/8888888_nd_new/truth_",truth,'_eu/8888888_',p,'_nd_eu_workspace_',truth,'.Rdata'))
}
if(p==1){
accu_master[counter] =  eu_predict(apply(beta_master,1,mean),mu,alpha,ymat,no_na)
}else{
accu_master[counter] =  eu_predict(beta_rs/n_pos,mu_rs/n_pos,alpha_rs/n_pos,ymat,no_na)
}
}
waic_decomp [counter,] = waic_compute_new(n_pos,pos_pred,pos_pred2,pos_pred3,no_na)
counter = counter+1
rm(list=setdiff(ls(),c('p_master','counter','waic_compute_new','waic_decomp','len_no_na','accu_master','sph_predict',
'eu_predict','truth','qf3','z_to_x','sph','main','best_mat','Tied','plot','large_penalty','eu_data')))
}
nr = 100
nc = 700
if(sph==T){
penalty_aic = nr * p_master + 2 * nc * p_master + nc
}else{
if(large_penalty==T){
penalty_aic = nr * p_master + 2 * nc * p_master
}else{
penalty_aic = nr * p_master + nc * p_master + nc
}
}
penalty_bic = penalty_aic / 2 * log (nr*nc)
waic_decomp = cbind(waic_decomp,penalty_aic,penalty_bic)
waic_decomp = cbind(waic_decomp, waic_decomp[,1]-waic_decomp[,2],
waic_decomp[,1]-waic_decomp[,3],waic_decomp[,1]-waic_decomp[,4],waic_decomp[,1]-waic_decomp[,5])
colnames(waic_decomp) = c('lppd','pwaic_1','pwaic_2','p_aic','p_bic','lppd-pwaic_1','lppd-pwaic_2','lppd-p_aic','lppd-p_bic')
rownames(waic_decomp) = p_master
best_mat= rbind(best_mat, apply(waic_decomp[,6:9],2,function(x) which(x==max(x))))
if(plot==T){
# pdf(file = paste0("Truth_",truth,"_",main,".pdf"),width=30, height=15)
pdf(file = paste0("Truth_",truth,"_EUdata_",eu_data,'_large_',large_penalty,"_waic_",main,".pdf"),width=15, height=15)
# par(mfrow=c(1,2))
par(mar=c(10,10,4,4),mgp=c(6,2,0))
range_waic = range(waic_decomp[,6:9])
plot(p_master,waic_decomp[,6],type='l', xlab='K', ylab='',lty=1,ylim =range_waic,cex=2,cex.lab=3,cex.axis=2,lwd=3,col='red')
lines(p_master,waic_decomp[,7],ylim =range_waic,cex=2,cex.lab=3,lty=2,cex.axis=2,lwd=3,col='blue')
lines(p_master,waic_decomp[,8],ylim =range_waic,cex=2,cex.lab=3,lty=4,cex.axis=2,lwd=3,col='orange')
lines(p_master,waic_decomp[,9],ylim =range_waic,cex=2,cex.lab=3,lty=5,cex.axis=2,lwd=3,col='green')
abline(v=truth,lwd=2,col='gray68')
if(truth==2){
plot_x = 2
plot_y = -6e4
}else if(truth ==3){
plot_x = 4
plot_y = -8e4
}else{
plot_x = 2
plot_y = -6e4
}
legend(plot_x, plot_y, c("WAIC1","WAIC2","AIC","BIC"),lty=c(1,2,4,5), bty="n", col=c("red", "blue","orange",'green'),cex=2,lwd=3)
dev.off()
pdf(file = paste0("Truth_",truth,"_accuracy_",main,".pdf"),width=15, height=15)
par(mar=c(10,10,4,4),mgp=c(6,2,0))
plot(p_master,accu_master,type='l', xlab='K', ylab='Training Accuracy',ylim=c(0.7,1),lty=1,cex=2,cex.lab=3,cex.axis=2,lwd=3,col='black')
abline(v=truth,lwd=2,col='gray68')
dev.off()
}
save(file=paste0(main,'_large_',large_penalty,"_EUdata_",eu_data,"_Truth_",truth,'.Rdata'),waic_decomp)
}
sph = F
Tied = F
plot = T
large_penalty = T
eu_data = T
if(sph==T){
large_penalty = "NA"
}
p_master = c(1:10)
if(sph==T){
main = 'sph'
}else{
main = 'eu'
}
plot_list = c(3)
best_mat = numeric(0)
for(truth in plot_list){
waic_decomp = matrix(0,length(p_master),3)
accu_master = rep(0,length(p_master))
counter = 1
for(p in p_master){
print(p)
setwd("F:/Study_Backedup/UCSC/LatentFactorModel/paper2_sim/new simulation/8888888_nd_new/")
if(sph==T){
if(Tied==T){
print('Tied bro')
load(paste0("F:/Study_Backedup/UCSC/LatentFactorModel/paper2_sim/new simulation/8888888_nd_new/truth_",truth,'/original/8888888_',p+1,'_nd_workspace.Rdata'))
}else{
print('new prior bro')
# load(paste0("F:/Study_Backedup/UCSC/LatentFactorModel/paper2_sim/new simulation/8888888_nd_new/truth_",truth,'/8888888_',p+1,'_nd_workspace.Rdata'))
load(paste0("F:/Study_Backedup/UCSC/LatentFactorModel/paper2_sim/new simulation/8888888_nd_new/truth_",truth,'/new_prior/8888888_',p+1,'_nd_workspace.Rdata'))
}
accu_master[counter] = sph_predict(n_pos,beta_rs,yes_rs,no_rs,kappa,no_na)
}else{
if(eu_data==T){
print('eu data, eu results bro')
load(paste0("F:/Study_Backedup/UCSC/LatentFactorModel/paper2_sim/new simulation/8888888_nd_new/truth_",truth,'_eu_eu_data/8888888_',p,'_nd_eu_workspace_',truth,'.Rdata'))
}else{
print('sph data, eu results bro')
load(paste0("F:/Study_Backedup/UCSC/LatentFactorModel/paper2_sim/new simulation/8888888_nd_new/truth_",truth,'_eu/8888888_',p,'_nd_eu_workspace_',truth,'.Rdata'))
}
if(p==1){
accu_master[counter] =  eu_predict(apply(beta_master,1,mean),mu,alpha,ymat,no_na)
}else{
accu_master[counter] =  eu_predict(beta_rs/n_pos,mu_rs/n_pos,alpha_rs/n_pos,ymat,no_na)
}
}
waic_decomp [counter,] = waic_compute_new(n_pos,pos_pred,pos_pred2,pos_pred3,no_na)
counter = counter+1
rm(list=setdiff(ls(),c('p_master','counter','waic_compute_new','waic_decomp','len_no_na','accu_master','sph_predict',
'eu_predict','truth','qf3','z_to_x','sph','main','best_mat','Tied','plot','large_penalty','eu_data')))
}
nr = 100
nc = 700
if(sph==T){
penalty_aic = nr * p_master + 2 * nc * p_master + nc
}else{
if(large_penalty==T){
penalty_aic = nr * p_master + 2 * nc * p_master
}else{
penalty_aic = nr * p_master + nc * p_master + nc
}
}
penalty_bic = penalty_aic / 2 * log (nr*nc)
waic_decomp = cbind(waic_decomp,penalty_aic,penalty_bic)
waic_decomp = cbind(waic_decomp, waic_decomp[,1]-waic_decomp[,2],
waic_decomp[,1]-waic_decomp[,3],waic_decomp[,1]-waic_decomp[,4],waic_decomp[,1]-waic_decomp[,5])
colnames(waic_decomp) = c('lppd','pwaic_1','pwaic_2','p_aic','p_bic','lppd-pwaic_1','lppd-pwaic_2','lppd-p_aic','lppd-p_bic')
rownames(waic_decomp) = p_master
best_mat= rbind(best_mat, apply(waic_decomp[,6:9],2,function(x) which(x==max(x))))
if(plot==T){
# pdf(file = paste0("Truth_",truth,"_",main,".pdf"),width=30, height=15)
pdf(file = paste0("Truth_",truth,"_EUdata_",eu_data,'_large_',large_penalty,"_waic_",main,".pdf"),width=15, height=15)
# par(mfrow=c(1,2))
par(mar=c(10,10,4,4),mgp=c(6,2,0))
range_waic = range(waic_decomp[,6:9])
plot(p_master,waic_decomp[,6],type='l', xlab='K', ylab='',lty=1,ylim =range_waic,cex=2,cex.lab=3,cex.axis=2,lwd=3,col='red')
lines(p_master,waic_decomp[,7],ylim =range_waic,cex=2,cex.lab=3,lty=2,cex.axis=2,lwd=3,col='blue')
lines(p_master,waic_decomp[,8],ylim =range_waic,cex=2,cex.lab=3,lty=4,cex.axis=2,lwd=3,col='orange')
lines(p_master,waic_decomp[,9],ylim =range_waic,cex=2,cex.lab=3,lty=5,cex.axis=2,lwd=3,col='green')
abline(v=truth,lwd=2,col='gray68')
if(truth==2){
plot_x = 2
plot_y = -6e4
}else if(truth ==3){
plot_x = 4
plot_y = -8e4
}else{
plot_x = 2
plot_y = -6e4
}
legend(plot_x, plot_y, c("WAIC1","WAIC2","AIC","BIC"),lty=c(1,2,4,5), bty="n", col=c("red", "blue","orange",'green'),cex=2,lwd=3)
dev.off()
pdf(file = paste0("Truth_",truth,"_accuracy_",main,".pdf"),width=15, height=15)
par(mar=c(10,10,4,4),mgp=c(6,2,0))
plot(p_master,accu_master,type='l', xlab='K', ylab='Training Accuracy',ylim=c(0.7,1),lty=1,cex=2,cex.lab=3,cex.axis=2,lwd=3,col='black')
abline(v=truth,lwd=2,col='gray68')
dev.off()
}
save(file=paste0(main,'_large_',large_penalty,"_EUdata_",eu_data,"_Truth_",truth,'.Rdata'),waic_decomp)
}
sph = F
Tied = F
plot = T
large_penalty = T
eu_data = T
if(sph==T){
large_penalty = "NA"
}
p_master = c(1:10)
if(sph==T){
main = 'sph'
}else{
main = 'eu'
}
plot_list = c(3)
best_mat = numeric(0)
for(truth in plot_list){
waic_decomp = matrix(0,length(p_master),3)
accu_master = rep(0,length(p_master))
counter = 1
for(p in p_master){
print(p)
setwd("F:/Study_Backedup/UCSC/LatentFactorModel/paper2_sim/new simulation/8888888_nd_new/")
if(sph==T){
if(Tied==T){
print('Tied bro')
load(paste0("F:/Study_Backedup/UCSC/LatentFactorModel/paper2_sim/new simulation/8888888_nd_new/truth_",truth,'/original/8888888_',p+1,'_nd_workspace.Rdata'))
}else{
print('new prior bro')
# load(paste0("F:/Study_Backedup/UCSC/LatentFactorModel/paper2_sim/new simulation/8888888_nd_new/truth_",truth,'/8888888_',p+1,'_nd_workspace.Rdata'))
load(paste0("F:/Study_Backedup/UCSC/LatentFactorModel/paper2_sim/new simulation/8888888_nd_new/truth_",truth,'/new_prior/8888888_',p+1,'_nd_workspace.Rdata'))
}
accu_master[counter] = sph_predict(n_pos,beta_rs,yes_rs,no_rs,kappa,no_na)
}else{
if(eu_data==T){
print('eu data, eu results bro')
load(paste0("F:/Study_Backedup/UCSC/LatentFactorModel/paper2_sim/new simulation/8888888_nd_new/truth_",truth,'_eu_eu_data/8888888_',p,'_nd_eu_workspace_',truth,'.Rdata'))
}else{
print('sph data, eu results bro')
load(paste0("F:/Study_Backedup/UCSC/LatentFactorModel/paper2_sim/new simulation/8888888_nd_new/truth_",truth,'_eu/8888888_',p,'_nd_eu_workspace_',truth,'.Rdata'))
}
if(p==1){
accu_master[counter] =  eu_predict(apply(beta_master,1,mean),mu,alpha,ymat,no_na)
}else{
accu_master[counter] =  eu_predict(beta_rs/n_pos,mu_rs/n_pos,alpha_rs/n_pos,ymat,no_na)
}
}
waic_decomp [counter,] = waic_compute_new(n_pos,pos_pred,pos_pred2,pos_pred3,no_na)
counter = counter+1
rm(list=setdiff(ls(),c('p_master','counter','waic_compute_new','waic_decomp','len_no_na','accu_master','sph_predict',
'eu_predict','truth','qf3','z_to_x','sph','main','best_mat','Tied','plot','large_penalty','eu_data')))
}
nr = 100
nc = 700
if(sph==T){
penalty_aic = nr * p_master + 2 * nc * p_master + nc
}else{
if(large_penalty==T){
penalty_aic = nr * p_master + 2 * nc * p_master
}else{
penalty_aic = nr * p_master + nc * p_master + nc
}
}
penalty_bic = penalty_aic / 2 * log (nr*nc)
waic_decomp = cbind(waic_decomp,penalty_aic,penalty_bic)
waic_decomp = cbind(waic_decomp, waic_decomp[,1]-waic_decomp[,2],
waic_decomp[,1]-waic_decomp[,3],waic_decomp[,1]-waic_decomp[,4],waic_decomp[,1]-waic_decomp[,5])
colnames(waic_decomp) = c('lppd','pwaic_1','pwaic_2','p_aic','p_bic','lppd-pwaic_1','lppd-pwaic_2','lppd-p_aic','lppd-p_bic')
rownames(waic_decomp) = p_master
best_mat= rbind(best_mat, apply(waic_decomp[,6:9],2,function(x) which(x==max(x))))
if(plot==T){
# pdf(file = paste0("Truth_",truth,"_",main,".pdf"),width=30, height=15)
pdf(file = paste0("Truth_",truth,"_EUdata_",eu_data,'_large_',large_penalty,"_waic_",main,".pdf"),width=15, height=15)
# par(mfrow=c(1,2))
par(mar=c(10,10,4,4),mgp=c(6,2,0))
range_waic = range(waic_decomp[,6:9])
plot(p_master,waic_decomp[,6],type='l', xlab='K', ylab='',lty=1,ylim =range_waic,cex=2,cex.lab=3,cex.axis=2,lwd=3,col='red')
lines(p_master,waic_decomp[,7],ylim =range_waic,cex=2,cex.lab=3,lty=2,cex.axis=2,lwd=3,col='blue')
lines(p_master,waic_decomp[,8],ylim =range_waic,cex=2,cex.lab=3,lty=4,cex.axis=2,lwd=3,col='orange')
lines(p_master,waic_decomp[,9],ylim =range_waic,cex=2,cex.lab=3,lty=5,cex.axis=2,lwd=3,col='green')
abline(v=truth,lwd=2,col='gray68')
if(truth==2){
plot_x = 2
plot_y = -6e4
}else if(truth ==3){
plot_x = 4
plot_y = -8e4
}else{
plot_x = 2
plot_y = -6e4
}
legend(plot_x, plot_y, c("WAIC1","WAIC2","AIC","BIC"),lty=c(1,2,4,5), bty="n", col=c("red", "blue","orange",'green'),cex=2,lwd=3)
dev.off()
pdf(file = paste0(main,'_large_',large_penalty,"_EUdata_",eu_data,"_Truth_",truth,'_Accuracy.pdf'),width=15, height=15)
par(mar=c(10,10,4,4),mgp=c(6,2,0))
plot(p_master,accu_master,type='l', xlab='K', ylab='Training Accuracy',ylim=c(0.7,1),lty=1,cex=2,cex.lab=3,cex.axis=2,lwd=3,col='black')
abline(v=truth,lwd=2,col='gray68')
dev.off()
}
save(file=paste0(main,'_large_',large_penalty,"_EUdata_",eu_data,"_Truth_",truth,'.Rdata'),waic_decomp)
}
sph = F
Tied = F
plot = T
large_penalty = F
eu_data = T
if(sph==T){
large_penalty = "NA"
}
p_master = c(1:10)
if(sph==T){
main = 'sph'
}else{
main = 'eu'
}
plot_list = c(3)
best_mat = numeric(0)
for(truth in plot_list){
waic_decomp = matrix(0,length(p_master),3)
accu_master = rep(0,length(p_master))
counter = 1
for(p in p_master){
print(p)
setwd("F:/Study_Backedup/UCSC/LatentFactorModel/paper2_sim/new simulation/8888888_nd_new/")
if(sph==T){
if(Tied==T){
print('Tied bro')
load(paste0("F:/Study_Backedup/UCSC/LatentFactorModel/paper2_sim/new simulation/8888888_nd_new/truth_",truth,'/original/8888888_',p+1,'_nd_workspace.Rdata'))
}else{
print('new prior bro')
# load(paste0("F:/Study_Backedup/UCSC/LatentFactorModel/paper2_sim/new simulation/8888888_nd_new/truth_",truth,'/8888888_',p+1,'_nd_workspace.Rdata'))
load(paste0("F:/Study_Backedup/UCSC/LatentFactorModel/paper2_sim/new simulation/8888888_nd_new/truth_",truth,'/new_prior/8888888_',p+1,'_nd_workspace.Rdata'))
}
accu_master[counter] = sph_predict(n_pos,beta_rs,yes_rs,no_rs,kappa,no_na)
}else{
if(eu_data==T){
print('eu data, eu results bro')
load(paste0("F:/Study_Backedup/UCSC/LatentFactorModel/paper2_sim/new simulation/8888888_nd_new/truth_",truth,'_eu_eu_data/8888888_',p,'_nd_eu_workspace_',truth,'.Rdata'))
}else{
print('sph data, eu results bro')
load(paste0("F:/Study_Backedup/UCSC/LatentFactorModel/paper2_sim/new simulation/8888888_nd_new/truth_",truth,'_eu/8888888_',p,'_nd_eu_workspace_',truth,'.Rdata'))
}
if(p==1){
accu_master[counter] =  eu_predict(apply(beta_master,1,mean),mu,alpha,ymat,no_na)
}else{
accu_master[counter] =  eu_predict(beta_rs/n_pos,mu_rs/n_pos,alpha_rs/n_pos,ymat,no_na)
}
}
waic_decomp [counter,] = waic_compute_new(n_pos,pos_pred,pos_pred2,pos_pred3,no_na)
counter = counter+1
rm(list=setdiff(ls(),c('p_master','counter','waic_compute_new','waic_decomp','len_no_na','accu_master','sph_predict',
'eu_predict','truth','qf3','z_to_x','sph','main','best_mat','Tied','plot','large_penalty','eu_data')))
}
nr = 100
nc = 700
if(sph==T){
penalty_aic = nr * p_master + 2 * nc * p_master + nc
}else{
if(large_penalty==T){
penalty_aic = nr * p_master + 2 * nc * p_master
}else{
penalty_aic = nr * p_master + nc * p_master + nc
}
}
penalty_bic = penalty_aic / 2 * log (nr*nc)
waic_decomp = cbind(waic_decomp,penalty_aic,penalty_bic)
waic_decomp = cbind(waic_decomp, waic_decomp[,1]-waic_decomp[,2],
waic_decomp[,1]-waic_decomp[,3],waic_decomp[,1]-waic_decomp[,4],waic_decomp[,1]-waic_decomp[,5])
colnames(waic_decomp) = c('lppd','pwaic_1','pwaic_2','p_aic','p_bic','lppd-pwaic_1','lppd-pwaic_2','lppd-p_aic','lppd-p_bic')
rownames(waic_decomp) = p_master
best_mat= rbind(best_mat, apply(waic_decomp[,6:9],2,function(x) which(x==max(x))))
if(plot==T){
# pdf(file = paste0("Truth_",truth,"_",main,".pdf"),width=30, height=15)
pdf(file = paste0("Truth_",truth,"_EUdata_",eu_data,'_large_',large_penalty,"_waic_",main,".pdf"),width=15, height=15)
# par(mfrow=c(1,2))
par(mar=c(10,10,4,4),mgp=c(6,2,0))
range_waic = range(waic_decomp[,6:9])
plot(p_master,waic_decomp[,6],type='l', xlab='K', ylab='',lty=1,ylim =range_waic,cex=2,cex.lab=3,cex.axis=2,lwd=3,col='red')
lines(p_master,waic_decomp[,7],ylim =range_waic,cex=2,cex.lab=3,lty=2,cex.axis=2,lwd=3,col='blue')
lines(p_master,waic_decomp[,8],ylim =range_waic,cex=2,cex.lab=3,lty=4,cex.axis=2,lwd=3,col='orange')
lines(p_master,waic_decomp[,9],ylim =range_waic,cex=2,cex.lab=3,lty=5,cex.axis=2,lwd=3,col='green')
abline(v=truth,lwd=2,col='gray68')
if(truth==2){
plot_x = 2
plot_y = -6e4
}else if(truth ==3){
plot_x = 4
plot_y = -8e4
}else{
plot_x = 2
plot_y = -6e4
}
legend(plot_x, plot_y, c("WAIC1","WAIC2","AIC","BIC"),lty=c(1,2,4,5), bty="n", col=c("red", "blue","orange",'green'),cex=2,lwd=3)
dev.off()
pdf(file = paste0(main,'_large_',large_penalty,"_EUdata_",eu_data,"_Truth_",truth,'_Accuracy.pdf'),width=15, height=15)
par(mar=c(10,10,4,4),mgp=c(6,2,0))
plot(p_master,accu_master,type='l', xlab='K', ylab='Training Accuracy',ylim=c(0.7,1),lty=1,cex=2,cex.lab=3,cex.axis=2,lwd=3,col='black')
abline(v=truth,lwd=2,col='gray68')
dev.off()
}
save(file=paste0(main,'_large_',large_penalty,"_EUdata_",eu_data,"_Truth_",truth,'.Rdata'),waic_decomp)
}
setwd("F:/Study_Backedup/UCSC/depository/Spherical_factor_model/data")
nr = 100
nc = 700
set.seed(2021)
ymat = ymat_sim(nr,nc,model_index = 5)
ymat_sim = function(nr,nc,model_index){
y_hat = matrix(0,nr,nc)
mu = rnorm(nc)
alpha = rmvn(nc,rep(0,model_index),diag(model_index))
beta = rmvn(nr,rep(0,model_index),diag(model_index))
mean_mat = t(tcrossprod(alpha,beta) + mu)
y_p = pnorm(mean_mat)
for(i in 1:nr){
for(j in 1:nc){
yp = y_p[i,j]
y_hat[i,j] = sample(c(1,0),1,prob=c(yp,1-yp))
}
}
return(y_hat)
}
nr = 100
nc = 700
set.seed(2021)
required_package = c('mvnfast','truncnorm','wnominate','pscl')
check_package = sum(unlist(lapply(required_package, require, character.only = TRUE)))==4
ymat = ymat_sim(nr,nc,model_index = 5)
save(file='ymat_eu_5.Rdata',ymat)
